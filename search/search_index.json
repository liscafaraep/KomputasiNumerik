{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Komputasi Numerik . . Nama : Liscafara Eldyar Pratiwi NIM : 180411100034 Mata Kuliah : Komputasi Numerik 4B Dosen : Mulaab S.Si. M.Kom . . KUMPULAN TUGAS KOMPUTASI NUMERIK . . . Keep learn, learn, and learn. Never give up!:)","title":"Home"},{"location":"#komputasi-numerik","text":". . Nama : Liscafara Eldyar Pratiwi NIM : 180411100034 Mata Kuliah : Komputasi Numerik 4B Dosen : Mulaab S.Si. M.Kom . .","title":"Komputasi Numerik"},{"location":"#kumpulan-tugas-komputasi-numerik","text":". . . Keep learn, learn, and learn. Never give up!:)","title":"KUMPULAN TUGAS KOMPUTASI NUMERIK"},{"location":"tugas1/","text":"Eror (Galat) pada Komputasi Numerik Pengertian Galat Error/Galat merupakan perbedaan antara hasil penyelesaian suatu model matematik secara numeric dengan penyelesaian secara analitis. Kesalahan yang terjadi sangatlah penting, karena kesalahan dalam pemakaian algoritma pendekatan akan menyebabkan nilai kesalahan yang besar. Sehingga pendekatan metode numerik selalu membahas tingkat kesalahan dan tingkat kecepatan proses yang akan terjadi. Masalah-masalah matematika yang sering kita selesaikan biasanya menggunakan metode analitik atau metode sejati, yaitu suatu metode yang memberikan solusi yang sesungguhnya, karena memiliki galat ( error ) yang bernilai nol. Tetapi penyelesaian dengan menggunakan metode analitik hanya terbatas , tidak selalu bisa diterapkan , maka solusinya masih dapat dicari yaitu dengan menggunakan metode numerik. Pada metode numerik solusinya merupakan hampiran (pendekatan) terhadap solusi sejati. Nilai Galat (Nilai Kesalahan) Besarnya kesalahan atas suatu nilai taksiran dapat dinyatakan secara kuantitatif dan kualitatif. Besarnya kesalahan yang dinyatakan secara kuantitatif disebut Kesalahan Absolut. Besarnya kesalahan yang dinyatakan secara kualitatif disebut dengan Kesalahan Relatif . Absolute Error Kesalahan absolut suatu kuantitas adalah nilai absolut dari selisih antara nilai sebenarnya X dan nilai perkiraan x. Ini dilambangkan dengan : \ud835\udc38\ud835\udc34 =|\ud835\udc4b\u2212 \ud835\udc65| Contoh sederhana : Nilai perkiraan \u1d2b adalah 3.1428571 dan nilai sebenarnya adalah 3.1415926. Temukan Kesalahan absolut \ud835\udc38\ud835\udc34 =|\ud835\udc4b\u2212 \ud835\udc65|= |3.1415926\u2212 3.1428571| \u200b = |\u2212 0 .0 0 1 2 6 4 5| = 0 .0 0 1 2 6 4 5 Relative Error Kesalahan relatif dari suatu kuantitas adalah rasio kesalahan absolutnya terhadap nilai sebenarnya. Ini dilambangkan dengan Er = |(XT-XA)/XT| Contoh (dari soal sebelumnya) : \ud835\udc38R = |3.1415926\u2212 3.1428571/3.1415926 | = | -0.0004025 | = 0.0004025 Persentase relative error: Er = |(XT-XA)/XT|*100% sumber kesalahan dalam komputasi numerik. A. Round off errors Kesalahan jenis ini terjadi akibat proses pembulatan dalam perhitungan. Secara umum, proses pembulatan ada 2 aturan yaitu : - Jika digit yang dibulatkan kurang dari 5, maka tidak terjadi pembulatan. - Sebaliknya, jika lebih dari 5, maka terjadi pembulatan yaitu dengan menambah satu. Contoh sederhananya adalah sebagai berikut : Pada perhitungan nilai x = 6/7, maka nilai x = 0,857142857143. Maka, jika terjadi pembulatan akan diperoleh nilai sebagai berikut : \u00e8 x = 0,86 ( mendekati nilai 2 desimal ). \u00e8 x = 0,8571 ( mendekati nilai 4 desimal ). \u00e8 x = 0,857143 ( mendekati nilai 6 desimal ). \u00e8 x = 0,85714286 ( mendekati nilai 8 desimal ). Dalam proses pembuatan, kesalahan yang timbul akibat pembulatan pada digit ke- n di belakang koma selalu bernilai : Dengan begitu, maka : \u00e8 Untuk x = 0,86 (n = 2), maka Error = | 0,857142857143 \u2013 0,86 | = 0,00285714286 Dengan begitu terbukti bahwa Error \u2264 10-4/2 <-> 0,00285714286 \u2264 0,005. \u00e8 Untuk x = 0,8571 (n = 4), maka Error = | 0,857142857143 \u2013 0,8571 | = 0,000042857143 Dengan begitu terbukti bahwa Error \u2264 10-4/2 <-> Error \u2264 0,00005. \u00e8 Dan seterusnya. ( Anda bisa membuktikan untuk x = 0,857143 dan x = 0,85714286. ) Kesalahan ini biasanya digunakan pada perhitungan data dari hasil percobaan praktikum seperti perhitungan nilai gravitasi dengan teknik perhitungan bandul, menentukan nilai tegangan permukaan, dan lain \u2013 lain. Masing \u2013 masing percobaan biasanya mengulang sebanyak 5 \u2013 10 kali dengan tujuan untuk mengetahui kesalahan mutlak dan mengetahui apakah data yang diperoleh dari hasil praktikum itu tepat, teliti, masih ada kesalahan, atau bahkan error-nya sangat jauh dari perhitungan berdasarkan formula. Teknik ini adalah aprosikmasi kesalahan ( dibahas di bagian blog Aprosikmasi Kesalahan ). Disinilah kegunaan untuk menentukan error suatu perhitungan dengan teknik ini. B. Truncation errors Kesalahan pemotongan biasanya terjadi karena pembuangan suku yang berderajat tinggi. Sebagai contoh untuk menghitung nilai cosinus dapat menggunakan deret Taylor yang dirumuskan di bawah ini : Karena batas akhirnya tak hingga, maka dilakukan pemotongan suku agar perhitungannya lebih sederhana. Misalkan menentukan nilai sin(20) = 0.9129452507276277. Dengan deret Taylor ( hampir sama dengan konsep perhitungan nilai cos ) sampain = 100 akan diperoleh : Dengan begitu nilai errornya adalah C. Range errors Kesalahan yang terjadi akibat nilai hasil komputasi melampaui batas angka yang diperbolehkan dalam komputer. Misalkan dalam penggunaan variabel integer pada proses perhitungan energi benda hitam yang menghasilkan nilai yang tidak tepat bahkan tidak terdefinisi. Untuk kesalahan ini berkaitan dengan batas dalam jangkauan representasi angka. Ini bisa dikatakan bahwa jika hasil perhitungan melebihi jangkauan, maka komputer akan menampilkan hasil yang tidak beraturan ( anggap saja hasil yang diperoleh diatur lagi oleh OS yang kita pakai ). Soal Buat program untuk menentukan jumlah suku agar eror yang tercipta mencapai 0,001 dan cari nilai yang paling mendekati dengan nilai sesungguhnya sesuai selisih tersebut! Program f(x) = e**3x import math x = 1 i = 1 f = 1 #e = (a**i)*x**i #h = abs(f-e) #print(i) while i>0: e = ((2**1)*x**i)/math.factorial(i) f1 = f+e #print(f1) h = abs(f-f1) #ini selisih print(\"Iterasi ke-\"+str(i)) print(\"Selisih =\",h) if h<=0.001: break else: f+=e i+=1 print(\"Jumlah iterasi =\",i) Output yang dihasilkan : Iterasi ke-1 Selisih = 2.0 Iterasi ke-2 Selisih = 1.0 Iterasi ke-3 Selisih = 0.33333333333333304 Iterasi ke-4 Selisih = 0.08333333333333304 Iterasi ke-5 Selisih = 0.016666666666666607 Iterasi ke-6 Selisih = 0.002777777777778212 Iterasi ke-7 Selisih = 0.0003968253968258395 Jumlah iterasi = 7 Referensi : http://algokelvinht.blogspot.com/2016/12/komputer-numerik-galat-atau-error-003.html Ppt : \"Error in Numerical Computations\"","title":"Tugas 1"},{"location":"tugas1/#eror-galat-pada-komputasi-numerik","text":"","title":"Eror (Galat) pada Komputasi Numerik"},{"location":"tugas1/#pengertian-galat","text":"Error/Galat merupakan perbedaan antara hasil penyelesaian suatu model matematik secara numeric dengan penyelesaian secara analitis. Kesalahan yang terjadi sangatlah penting, karena kesalahan dalam pemakaian algoritma pendekatan akan menyebabkan nilai kesalahan yang besar. Sehingga pendekatan metode numerik selalu membahas tingkat kesalahan dan tingkat kecepatan proses yang akan terjadi. Masalah-masalah matematika yang sering kita selesaikan biasanya menggunakan metode analitik atau metode sejati, yaitu suatu metode yang memberikan solusi yang sesungguhnya, karena memiliki galat ( error ) yang bernilai nol. Tetapi penyelesaian dengan menggunakan metode analitik hanya terbatas , tidak selalu bisa diterapkan , maka solusinya masih dapat dicari yaitu dengan menggunakan metode numerik. Pada metode numerik solusinya merupakan hampiran (pendekatan) terhadap solusi sejati.","title":"Pengertian Galat"},{"location":"tugas1/#nilai-galat-nilai-kesalahan","text":"Besarnya kesalahan atas suatu nilai taksiran dapat dinyatakan secara kuantitatif dan kualitatif. Besarnya kesalahan yang dinyatakan secara kuantitatif disebut Kesalahan Absolut. Besarnya kesalahan yang dinyatakan secara kualitatif disebut dengan Kesalahan Relatif .","title":"Nilai Galat (Nilai Kesalahan)"},{"location":"tugas1/#absolute-error","text":"Kesalahan absolut suatu kuantitas adalah nilai absolut dari selisih antara nilai sebenarnya X dan nilai perkiraan x. Ini dilambangkan dengan : \ud835\udc38\ud835\udc34 =|\ud835\udc4b\u2212 \ud835\udc65| Contoh sederhana : Nilai perkiraan \u1d2b adalah 3.1428571 dan nilai sebenarnya adalah 3.1415926. Temukan Kesalahan absolut \ud835\udc38\ud835\udc34 =|\ud835\udc4b\u2212 \ud835\udc65|= |3.1415926\u2212 3.1428571| \u200b = |\u2212 0 .0 0 1 2 6 4 5| = 0 .0 0 1 2 6 4 5","title":"Absolute Error"},{"location":"tugas1/#relative-error","text":"Kesalahan relatif dari suatu kuantitas adalah rasio kesalahan absolutnya terhadap nilai sebenarnya. Ini dilambangkan dengan Er = |(XT-XA)/XT| Contoh (dari soal sebelumnya) : \ud835\udc38R = |3.1415926\u2212 3.1428571/3.1415926 | = | -0.0004025 | = 0.0004025 Persentase relative error: Er = |(XT-XA)/XT|*100% sumber kesalahan dalam komputasi numerik. A. Round off errors Kesalahan jenis ini terjadi akibat proses pembulatan dalam perhitungan. Secara umum, proses pembulatan ada 2 aturan yaitu : - Jika digit yang dibulatkan kurang dari 5, maka tidak terjadi pembulatan. - Sebaliknya, jika lebih dari 5, maka terjadi pembulatan yaitu dengan menambah satu. Contoh sederhananya adalah sebagai berikut : Pada perhitungan nilai x = 6/7, maka nilai x = 0,857142857143. Maka, jika terjadi pembulatan akan diperoleh nilai sebagai berikut : \u00e8 x = 0,86 ( mendekati nilai 2 desimal ). \u00e8 x = 0,8571 ( mendekati nilai 4 desimal ). \u00e8 x = 0,857143 ( mendekati nilai 6 desimal ). \u00e8 x = 0,85714286 ( mendekati nilai 8 desimal ). Dalam proses pembuatan, kesalahan yang timbul akibat pembulatan pada digit ke- n di belakang koma selalu bernilai : Dengan begitu, maka : \u00e8 Untuk x = 0,86 (n = 2), maka Error = | 0,857142857143 \u2013 0,86 | = 0,00285714286 Dengan begitu terbukti bahwa Error \u2264 10-4/2 <-> 0,00285714286 \u2264 0,005. \u00e8 Untuk x = 0,8571 (n = 4), maka Error = | 0,857142857143 \u2013 0,8571 | = 0,000042857143 Dengan begitu terbukti bahwa Error \u2264 10-4/2 <-> Error \u2264 0,00005. \u00e8 Dan seterusnya. ( Anda bisa membuktikan untuk x = 0,857143 dan x = 0,85714286. ) Kesalahan ini biasanya digunakan pada perhitungan data dari hasil percobaan praktikum seperti perhitungan nilai gravitasi dengan teknik perhitungan bandul, menentukan nilai tegangan permukaan, dan lain \u2013 lain. Masing \u2013 masing percobaan biasanya mengulang sebanyak 5 \u2013 10 kali dengan tujuan untuk mengetahui kesalahan mutlak dan mengetahui apakah data yang diperoleh dari hasil praktikum itu tepat, teliti, masih ada kesalahan, atau bahkan error-nya sangat jauh dari perhitungan berdasarkan formula. Teknik ini adalah aprosikmasi kesalahan ( dibahas di bagian blog Aprosikmasi Kesalahan ). Disinilah kegunaan untuk menentukan error suatu perhitungan dengan teknik ini. B. Truncation errors Kesalahan pemotongan biasanya terjadi karena pembuangan suku yang berderajat tinggi. Sebagai contoh untuk menghitung nilai cosinus dapat menggunakan deret Taylor yang dirumuskan di bawah ini : Karena batas akhirnya tak hingga, maka dilakukan pemotongan suku agar perhitungannya lebih sederhana. Misalkan menentukan nilai sin(20) = 0.9129452507276277. Dengan deret Taylor ( hampir sama dengan konsep perhitungan nilai cos ) sampain = 100 akan diperoleh : Dengan begitu nilai errornya adalah C. Range errors Kesalahan yang terjadi akibat nilai hasil komputasi melampaui batas angka yang diperbolehkan dalam komputer. Misalkan dalam penggunaan variabel integer pada proses perhitungan energi benda hitam yang menghasilkan nilai yang tidak tepat bahkan tidak terdefinisi. Untuk kesalahan ini berkaitan dengan batas dalam jangkauan representasi angka. Ini bisa dikatakan bahwa jika hasil perhitungan melebihi jangkauan, maka komputer akan menampilkan hasil yang tidak beraturan ( anggap saja hasil yang diperoleh diatur lagi oleh OS yang kita pakai ).","title":"Relative Error"},{"location":"tugas1/#soal","text":"Buat program untuk menentukan jumlah suku agar eror yang tercipta mencapai 0,001 dan cari nilai yang paling mendekati dengan nilai sesungguhnya sesuai selisih tersebut!","title":"Soal"},{"location":"tugas1/#program","text":"f(x) = e**3x import math x = 1 i = 1 f = 1 #e = (a**i)*x**i #h = abs(f-e) #print(i) while i>0: e = ((2**1)*x**i)/math.factorial(i) f1 = f+e #print(f1) h = abs(f-f1) #ini selisih print(\"Iterasi ke-\"+str(i)) print(\"Selisih =\",h) if h<=0.001: break else: f+=e i+=1 print(\"Jumlah iterasi =\",i) Output yang dihasilkan : Iterasi ke-1 Selisih = 2.0 Iterasi ke-2 Selisih = 1.0 Iterasi ke-3 Selisih = 0.33333333333333304 Iterasi ke-4 Selisih = 0.08333333333333304 Iterasi ke-5 Selisih = 0.016666666666666607 Iterasi ke-6 Selisih = 0.002777777777778212 Iterasi ke-7 Selisih = 0.0003968253968258395 Jumlah iterasi = 7 Referensi : http://algokelvinht.blogspot.com/2016/12/komputer-numerik-galat-atau-error-003.html Ppt : \"Error in Numerical Computations\"","title":"Program"}]}